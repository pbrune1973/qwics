package data.testbr;

import com.turrettech.p3cobol.lib.ByteStore;
import com.turrettech.p3cobol.lib.CobolComparator;
import com.turrettech.p3cobol.lib.CobolPointer;
import com.turrettech.p3cobol.lib.RunUnit;
import com.turrettech.p3cobol.lib.annotations.GroupAttributes;
import com.turrettech.p3cobol.lib.common.DataConstants;
import com.turrettech.p3cobol.lib.common.DataUtil;
import com.turrettech.p3cobol.lib.internal.ByteStoreImpl;
import com.turrettech.p3cobol.runtime.P3RuntimeOptions;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.nio.ByteBuffer;
import javax.annotation.Generated;
import programs.Testbr;

/**
 * Generated by: P3/COBOL 17.0.0-SNAPSHOT (17.0.0-8a299c8 [Build #692])<br/>
 * Options: 
 * <p>
 * <?xml version="1.0" encoding="UTF-8" standalone="yes"?><p3-compiler-options><binary-allocation>DIALECT_DEFAULT</binary-allocation><byte-order>BIG_ENDIAN</byte-order><classpath>./workspace/QwicsJavaNativeBridge/target/QwicsJavaNativeBridge-0.9.jar</classpath><x-highway61-compiler-target>DEFAULT</x-highway61-compiler-target><computational-default>DIALECT_DEFAULT</computational-default><config-file></config-file><copy-directories>.</copy-directories><copy-extensions>cpy</copy-extensions><data-package>data.*</data-package><debug-kind>MINIMAL</debug-kind><debug-level>DEFAULT</debug-level><decimal-type>DECIMAL</decimal-type><x-zoned-decimal-type>DIALECT_DEFAULT</x-zoned-decimal-type><source-charset-default>ISO_8859_1</source-charset-default><default-delimiting>DIALECT_DEFAULT</default-delimiting><default-lock-delay>100</default-lock-delay><default-locking>DIALECT_DEFAULT</default-locking><default-select-mode>DYNAMIC</default-select-mode><default-sharing>DIALECT_DEFAULT</default-sharing><diagnostic-levels></diagnostic-levels><diagnostic-threshold>WARNING</diagnostic-threshold><dialect>NONE</dialect><x-ebcdic-variant>CP037</x-ebcdic-variant><x-event-type-filter>BANNER DIAGNOSTIC ERROR</x-event-type-filter><floating-point-rounding>NONE</floating-point-rounding><fractional-exponentiation-type>DOUBLE</fractional-exponentiation-type><x-highway61-output-charset>ISO_8859_1</x-highway61-output-charset><includingDebug>false</includingDebug><all-files-optional>false</all-files-optional><x-allow-bound-indexes>false</x-allow-bound-indexes><x-dead-symbols-included>true</x-dead-symbols-included><x-copy-file-caching>true</x-copy-file-caching><x-zoned-decimal-value-checks>true</x-zoned-decimal-value-checks><debug-lines>false</debug-lines><x-enhanced-compiler-diagnostics>true</x-enhanced-compiler-diagnostics><display-numeric-conversion>false</display-numeric-conversion><x-cross-reference>false</x-cross-reference><sign-default-leading>false</sign-default-leading><sign-default-separate>false</sign-default-separate><fast-initialize>false</fast-initialize><x-fast-initialize-external>true</x-fast-initialize-external><force-default-charset>false</force-default-charset><generate-entry-classes>true</generate-entry-classes><generate-filler-annotations>false</generate-filler-annotations><x-group-accessors>false</x-group-accessors><histogram>false</histogram><generate-java-beans>false</generate-java-beans><generate-class-files>true</generate-class-files><generate-javadocs>true</generate-javadocs><generate-program-classes>true</generate-program-classes><generate-synchronized-accessors>false</generate-synchronized-accessors><x-database-creation>true</x-database-creation><ignore-uncaught-arithmetic-overflow>true</ignore-uncaught-arithmetic-overflow><implicit-recursion>false</implicit-recursion><debug>false</debug><x-compatible-initialize>false</x-compatible-initialize><x-interned-literals>true</x-interned-literals><x-intermediate-source>false</x-intermediate-source><list-output>false</list-output><storage-map>false</storage-map><x-data-migration>false</x-data-migration><x-highway61>false</x-highway61><x-syntax-check-only>false</x-syntax-check-only><congruent-assignment-optimization>true</congruent-assignment-optimization><literal-compaction-optimization>true</literal-compaction-optimization><x-class-file-list>false</x-class-file-list><overwrite>true</overwrite><x-highway61-pass-length>true</x-highway61-pass-length><x-highway61-pass-return-code>false</x-highway61-pass-return-code><pointer-math>false</pointer-math><embedded-sql>true</embedded-sql><x-generate-relaxed-refmod>false</x-generate-relaxed-refmod><commented-cobol-comments>false</commented-cobol-comments><commented-cobol-statements>false</commented-cobol-statements><terminal-accept-display-mode>false</terminal-accept-display-mode><x-highway61-use-length-special-register>false</x-highway61-use-length-special-register><direct-storage-access-optimization>true</direct-storage-access-optimization><x-compiler-trace>false</x-compiler-trace><x-track-data-flow>false</x-track-data-flow><truncate-binary>true</truncate-binary><x-based-linkage>true</x-based-linkage><x-based-local-storage>true</x-based-local-storage><replacement-word-wrapping>false</replacement-word-wrapping><java-arguments></java-arguments><java-properties></java-properties><sticky-linkage>DIALECT_DEFAULT</sticky-linkage><listing-output-file>*</listing-output-file><locking-behavior>DIALECT_DEFAULT</locking-behavior><long-arithmetic-safety>CHECKED</long-arithmetic-safety><histogram-smallest-bucket>STATEMENT</histogram-smallest-bucket><max-init-count>1000</max-init-count><maximum-decimal-digits>32</maximum-decimal-digits><native-charset>NATIVE</native-charset><optionFileApplied>false</optionFileApplied><perform-adhesion>DIALECT_DEFAULT</perform-adhesion><perform-type>DIALECT_DEFAULT</perform-type><pointer-size>0</pointer-size><program-package>programs</program-package><debug-source-base-directory>.</debug-source-base-directory><source-directory>./workspace/QwicsJNIWebApp/src/main/java</source-directory><source-format>FIXED72</source-format><x-database-type>1</x-database-type><synchronize-size>0</synchronize-size><tab-size>4</tab-size><x-trace-level>0</x-trace-level><when-compiled-date-format>hh.mm.ssMMM dd, yyyy</when-compiled-date-format><wrap-control-threshold>500</wrap-control-threshold><wrapping-threshold>500</wrapping-threshold></p3-compiler-options>
 * </p>
 */
@GroupAttributes
@Generated(
    value = "com.turrettech.p3cobol.P3Compiler",
    date = "2023-11-17T16:46:19.207872"
)
public class Dfheiblk extends ByteStoreImpl {
  private static final byte[] LITERALS = Testbr.LITERALS;

  public int _eibtime;

  public boolean _eibtime__isValid;

  public boolean _eibtime__isCoherent;

  public int _eibdate;

  public boolean _eibdate__isValid;

  public boolean _eibdate__isCoherent;

  public int _eibtaskn;

  public boolean _eibtaskn__isValid;

  public boolean _eibtaskn__isCoherent;

  public int _dfheigdi;

  public boolean _dfheigdi__isValid;

  public boolean _dfheigdi__isCoherent;

  public int _eibcposn;

  public boolean _eibcposn__isValid;

  public boolean _eibcposn__isCoherent;

  public int _eibcale2;

  public boolean _eibcale2__isValid;

  public boolean _eibcale2__isCoherent;

  public int _eibresp;

  public boolean _eibresp__isValid;

  public boolean _eibresp__isCoherent;

  public int _eibresp2;

  public boolean _eibresp2__isValid;

  public boolean _eibresp2__isCoherent;

  /**
   * "dfheiblk" - no argument constructor.
   */
  public Dfheiblk() {
    super(85, DataConstants.CobolType.GRP);
  }

  /**
   * "dfheiblk" - one argument (RunUnit) constructor (no longer relied upon by generated code).
   */
  @Deprecated
  public Dfheiblk(final RunUnit runUnit) {
    super(85, DataConstants.CobolType.GRP);
  }

  /**
   * "dfheiblk" - constructor from ByteStore (used for most REDEFINES).
   */
  public Dfheiblk(ByteStore buffer) {
    super(buffer);
  }

  /**
   * "dfheiblk" - constructor from ByteStore (used for some REDEFINES).
   */
  public Dfheiblk(ByteStore buffer, int offset, int length) {
    super(buffer, offset, length);
  }

  /**
   * "dfheiblk" - constructor from CobolPointer (used for based groups).
   */
  public Dfheiblk(CobolPointer p) {
    super(p);
  }

  /**
   * "dfheiblk" - constructor from P3RuntimeOptions (used for POJO convenience).
   */
  public Dfheiblk(P3RuntimeOptions options) {
    super(options, 85);
  }

  public CobolComparator getComparator() {
    return super.getComparator(LITERALS);
  }

  /**
   * Initialize items beginning with the first one.
   */
  public void initialize() {
    synchronize_();
  }

  public void set_Eibtime(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(0, 4, val, 0);
    } else {
      set_Eibtime(((Number)o).intValue());
    }
  }

  public int get_Eibtime() {
    if (!_eibtime__isValid) { _eibtime = super.getPackedDecimalInt(0,7,DataConstants.CobolType.NPS); _eibtime__isValid = true; _eibtime__isCoherent = true;  } return _eibtime;
  }

  public int set_Eibtime(int val) {
    val = super.truncate(7, val,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS); this._eibtime = val; _eibtime__isValid = true; _eibtime__isCoherent = false; return val; 
  }

  public void synchronize_Eibtime() {
    if (_eibtime__isValid && !_eibtime__isCoherent) {
      _eibtime__isCoherent = true;
      super.setPackedDecimalNormalized(0,7, _eibtime,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS);
    }
  }

  public void set_Eibdate(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(4, 4, val, 0);
    } else {
      set_Eibdate(((Number)o).intValue());
    }
  }

  public int get_Eibdate() {
    if (!_eibdate__isValid) { _eibdate = super.getPackedDecimalInt(4,7,DataConstants.CobolType.NPS); _eibdate__isValid = true; _eibdate__isCoherent = true;  } return _eibdate;
  }

  public int set_Eibdate(int val) {
    val = super.truncate(7, val,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS); this._eibdate = val; _eibdate__isValid = true; _eibdate__isCoherent = false; return val; 
  }

  public void synchronize_Eibdate() {
    if (_eibdate__isValid && !_eibdate__isCoherent) {
      _eibdate__isCoherent = true;
      super.setPackedDecimalNormalized(4,7, _eibdate,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS);
    }
  }

  public void set_Eibtrnid(ByteBuffer val) {
    super.setBytes(8, 4, val, 0);
  }

  public ByteBuffer get_Eibtrnid() {
    return super.toBuffer(8,4);
  }

  public void set_Eibtaskn(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(12, 4, val, 0);
    } else {
      set_Eibtaskn(((Number)o).intValue());
    }
  }

  public int get_Eibtaskn() {
    if (!_eibtaskn__isValid) { _eibtaskn = super.getPackedDecimalInt(12,7,DataConstants.CobolType.NPS); _eibtaskn__isValid = true; _eibtaskn__isCoherent = true;  } return _eibtaskn;
  }

  public int set_Eibtaskn(int val) {
    val = super.truncate(7, val,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS); this._eibtaskn = val; _eibtaskn__isValid = true; _eibtaskn__isCoherent = false; return val; 
  }

  public void synchronize_Eibtaskn() {
    if (_eibtaskn__isValid && !_eibtaskn__isCoherent) {
      _eibtaskn__isCoherent = true;
      super.setPackedDecimalNormalized(12,7, _eibtaskn,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NPS);
    }
  }

  public void set_Eibtrmid(ByteBuffer val) {
    super.setBytes(16, 4, val, 0);
  }

  public ByteBuffer get_Eibtrmid() {
    return super.toBuffer(16,4);
  }

  public void set_Dfheigdi(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(20, 2, val, 0);
    } else {
      set_Dfheigdi(((Number)o).intValue());
    }
  }

  public int get_Dfheigdi() {
    if (!_dfheigdi__isValid) { _dfheigdi = super.getBinaryIntUNO(20,2,DataConstants.CobolType.NBS); _dfheigdi__isValid = true; _dfheigdi__isCoherent = true;  } return _dfheigdi;
  }

  public int set_Dfheigdi(int val) {
    val = super.truncate( 4, val, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2); this._dfheigdi = val; _dfheigdi__isValid = true; _dfheigdi__isCoherent = false; return val; 
  }

  public void synchronize_Dfheigdi() {
    if (_dfheigdi__isValid && !_dfheigdi__isCoherent) {
      _dfheigdi__isCoherent = true;
      super.setBinaryNormalized(20, 4, _dfheigdi, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2);
    }
  }

  public void set_Eibcposn(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(22, 2, val, 0);
    } else {
      set_Eibcposn(((Number)o).intValue());
    }
  }

  public int get_Eibcposn() {
    if (!_eibcposn__isValid) { _eibcposn = super.getBinaryIntUNO(22,2,DataConstants.CobolType.NBS); _eibcposn__isValid = true; _eibcposn__isCoherent = true;  } return _eibcposn;
  }

  public int set_Eibcposn(int val) {
    val = super.truncate( 4, val, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2); this._eibcposn = val; _eibcposn__isValid = true; _eibcposn__isCoherent = false; return val; 
  }

  public void synchronize_Eibcposn() {
    if (_eibcposn__isValid && !_eibcposn__isCoherent) {
      _eibcposn__isCoherent = true;
      super.setBinaryNormalized(22, 4, _eibcposn, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2);
    }
  }

  public void set_Eibcale2(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(24, 2, val, 0);
    } else {
      set_Eibcale2(((Number)o).intValue());
    }
  }

  public int get_Eibcale2() {
    if (!_eibcale2__isValid) { _eibcale2 = super.getBinaryIntUNO(24,2,DataConstants.CobolType.NBS); _eibcale2__isValid = true; _eibcale2__isCoherent = true;  } return _eibcale2;
  }

  public int set_Eibcale2(int val) {
    val = super.truncate( 4, val, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2); this._eibcale2 = val; _eibcale2__isValid = true; _eibcale2__isCoherent = false; return val; 
  }

  public void synchronize_Eibcale2() {
    if (_eibcale2__isValid && !_eibcale2__isCoherent) {
      _eibcale2__isCoherent = true;
      super.setBinaryNormalized(24, 4, _eibcale2, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 2);
    }
  }

  public void set_Eibaid2(ByteBuffer val) {
    super.setBytes(26, 1, val, 0);
  }

  public ByteBuffer get_Eibaid2() {
    return super.toBuffer(26,1);
  }

  public void set_Eibfn(ByteBuffer val) {
    super.setBytes(27, 2, val, 0);
  }

  public ByteBuffer get_Eibfn() {
    return super.toBuffer(27,2);
  }

  public void set_Eibrcode(ByteBuffer val) {
    super.setBytes(29, 6, val, 0);
  }

  public ByteBuffer get_Eibrcode() {
    return super.toBuffer(29,6);
  }

  public void set_Eibds(ByteBuffer val) {
    super.setBytes(35, 8, val, 0);
  }

  public ByteBuffer get_Eibds() {
    return super.toBuffer(35,8);
  }

  public void set_Eibreqid(ByteBuffer val) {
    super.setBytes(43, 8, val, 0);
  }

  public ByteBuffer get_Eibreqid() {
    return super.toBuffer(43,8);
  }

  public void set_Eibrsrce(ByteBuffer val) {
    super.setBytes(51, 8, val, 0);
  }

  public ByteBuffer get_Eibrsrce() {
    return super.toBuffer(51,8);
  }

  public void set_Eibsync(ByteBuffer val) {
    super.setBytes(59, 1, val, 0);
  }

  public ByteBuffer get_Eibsync() {
    return super.toBuffer(59,1);
  }

  public void set_Eibfree(ByteBuffer val) {
    super.setBytes(60, 1, val, 0);
  }

  public ByteBuffer get_Eibfree() {
    return super.toBuffer(60,1);
  }

  public void set_Eibrecv(ByteBuffer val) {
    super.setBytes(61, 1, val, 0);
  }

  public ByteBuffer get_Eibrecv() {
    return super.toBuffer(61,1);
  }

  public void set_Eibfil(ByteBuffer val) {
    super.setBytes(62, 1, val, 0);
  }

  public ByteBuffer get_Eibfil() {
    return super.toBuffer(62,1);
  }

  public void set_Eibatt(ByteBuffer val) {
    super.setBytes(63, 1, val, 0);
  }

  public ByteBuffer get_Eibatt() {
    return super.toBuffer(63,1);
  }

  public void set_Eibeoc(ByteBuffer val) {
    super.setBytes(64, 1, val, 0);
  }

  public ByteBuffer get_Eibeoc() {
    return super.toBuffer(64,1);
  }

  public void set_Eibfmh(ByteBuffer val) {
    super.setBytes(65, 1, val, 0);
  }

  public ByteBuffer get_Eibfmh() {
    return super.toBuffer(65,1);
  }

  public void set_Eibcompl(ByteBuffer val) {
    super.setBytes(66, 1, val, 0);
  }

  public ByteBuffer get_Eibcompl() {
    return super.toBuffer(66,1);
  }

  public void set_Eibsig(ByteBuffer val) {
    super.setBytes(67, 1, val, 0);
  }

  public ByteBuffer get_Eibsig() {
    return super.toBuffer(67,1);
  }

  public void set_Eibconf(ByteBuffer val) {
    super.setBytes(68, 1, val, 0);
  }

  public ByteBuffer get_Eibconf() {
    return super.toBuffer(68,1);
  }

  public void set_Eiberr(ByteBuffer val) {
    super.setBytes(69, 1, val, 0);
  }

  public ByteBuffer get_Eiberr() {
    return super.toBuffer(69,1);
  }

  public void set_Eiberrcd(ByteBuffer val) {
    super.setBytes(70, 4, val, 0);
  }

  public ByteBuffer get_Eiberrcd() {
    return super.toBuffer(70,4);
  }

  public void set_Eibsynrb(ByteBuffer val) {
    super.setBytes(74, 1, val, 0);
  }

  public ByteBuffer get_Eibsynrb() {
    return super.toBuffer(74,1);
  }

  public void set_Eibnodat(ByteBuffer val) {
    super.setBytes(75, 1, val, 0);
  }

  public ByteBuffer get_Eibnodat() {
    return super.toBuffer(75,1);
  }

  public void set_Eibresp(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(76, 4, val, 0);
    } else {
      set_Eibresp(((Number)o).intValue());
    }
  }

  public int get_Eibresp() {
    if (!_eibresp__isValid) { _eibresp = super.getBinaryIntUNO(76,4,DataConstants.CobolType.NBS); _eibresp__isValid = true; _eibresp__isCoherent = true;  } return _eibresp;
  }

  public int set_Eibresp(int val) {
    val = super.truncate( 8, val, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 4); this._eibresp = val; _eibresp__isValid = true; _eibresp__isCoherent = false; return val; 
  }

  public void synchronize_Eibresp() {
    if (_eibresp__isValid && !_eibresp__isCoherent) {
      _eibresp__isCoherent = true;
      super.setBinaryNormalized(76, 8, _eibresp, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 4);
    }
  }

  public void set_Eibresp2(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(80, 4, val, 0);
    } else {
      set_Eibresp2(((Number)o).intValue());
    }
  }

  public int get_Eibresp2() {
    if (!_eibresp2__isValid) { _eibresp2 = super.getBinaryIntUNO(80,4,DataConstants.CobolType.NBS); _eibresp2__isValid = true; _eibresp2__isCoherent = true;  } return _eibresp2;
  }

  public int set_Eibresp2(int val) {
    val = super.truncate( 8, val, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 4); this._eibresp2 = val; _eibresp2__isValid = true; _eibresp2__isCoherent = false; return val; 
  }

  public void synchronize_Eibresp2() {
    if (_eibresp2__isValid && !_eibresp2__isCoherent) {
      _eibresp2__isCoherent = true;
      super.setBinaryNormalized(80, 8, _eibresp2, com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NBS, 4);
    }
  }

  public void set_Eibrldbk(ByteBuffer val) {
    super.setBytes(84, 1, val, 0);
  }

  public ByteBuffer get_Eibrldbk() {
    return super.toBuffer(84,1);
  }

  public String toString() {
    synchronize_();
    return getComparator().getCharset().decode(getBuffer()).toString();
  }

  public void set(String val) {
    synchronize_();
    setBytes(getComparator().getCharset().encode(val));
    void_();
  }

  /**
   * generateGroupGetBody("dfheiblk") - group get logic
   */
  public ByteBuffer getBuffer() {
    return super.getBuffer(0,85);
  }

  public void setBytes(ByteBuffer val) {
    super.setBytes(0, 85, val, 0);
  }

  /**
   * generateGroupAccessors("dfheiblk") - group reference modified setter method
   * generateGroupSetModifiedBody("dfheiblk") - reference modified group set logic
   */
  @Override
  public void setBytes(final int offset, final int length, ByteBuffer val) {
    super.setBytesConstrained(0 + offset, Math.min(85 - offset, length), val);
  }

  /**
   * generateGroupAccessors("dfheiblk") - group synchronizer
   */
  public void synchronize_() {
  }

  /**
   * generateGroupAccessors("dfheiblk") - group voider
   */
  public void void_() {
  }

  /**
   * generateGroupAccessors("dfheiblk") - group pointer getter (for non-based groups only)
   * generateGroupGetPointerBody("dfheiblk") - group get pointer logic (non-based only)
   */
  public CobolPointer get_Dfheiblk__Pointer() {
    return super.pointerTo(0,85, DataConstants.CobolType.GRP);
  }

  static final ByteBuffer getLiteral(final int offset, final int length) {
    return ByteBuffer.wrap(LITERALS, offset, length);
  }

  static final String getNationalLiteral(final int offset, final int length) {
    return DataUtil.utf8Charset.decode(getLiteral(offset, length)).toString();
  }
}
