package data.testbr;

import com.turrettech.p3cobol.lib.ByteStore;
import com.turrettech.p3cobol.lib.CobolComparator;
import com.turrettech.p3cobol.lib.CobolPointer;
import com.turrettech.p3cobol.lib.RunUnit;
import com.turrettech.p3cobol.lib.annotations.GroupAttributes;
import com.turrettech.p3cobol.lib.common.DataConstants;
import com.turrettech.p3cobol.lib.common.DataUtil;
import com.turrettech.p3cobol.lib.internal.ByteStoreImpl;
import com.turrettech.p3cobol.runtime.P3RuntimeOptions;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.nio.ByteBuffer;
import javax.annotation.Generated;
import programs.Testbr;

/**
 * Generated by: P3/COBOL 17.0.0-SNAPSHOT (17.0.0-8a299c8 [Build #692])<br/>
 * Options: 
 * <p>
 * <?xml version="1.0" encoding="UTF-8" standalone="yes"?><p3-compiler-options><binary-allocation>DIALECT_DEFAULT</binary-allocation><byte-order>BIG_ENDIAN</byte-order><classpath>./workspace/QwicsJavaNativeBridge/target/QwicsJavaNativeBridge-0.9.jar</classpath><x-highway61-compiler-target>DEFAULT</x-highway61-compiler-target><computational-default>DIALECT_DEFAULT</computational-default><config-file></config-file><copy-directories>.</copy-directories><copy-extensions>cpy</copy-extensions><data-package>data.*</data-package><debug-kind>MINIMAL</debug-kind><debug-level>DEFAULT</debug-level><decimal-type>DECIMAL</decimal-type><x-zoned-decimal-type>DIALECT_DEFAULT</x-zoned-decimal-type><source-charset-default>ISO_8859_1</source-charset-default><default-delimiting>DIALECT_DEFAULT</default-delimiting><default-lock-delay>100</default-lock-delay><default-locking>DIALECT_DEFAULT</default-locking><default-select-mode>DYNAMIC</default-select-mode><default-sharing>DIALECT_DEFAULT</default-sharing><diagnostic-levels></diagnostic-levels><diagnostic-threshold>WARNING</diagnostic-threshold><dialect>NONE</dialect><x-ebcdic-variant>CP037</x-ebcdic-variant><x-event-type-filter>BANNER DIAGNOSTIC ERROR</x-event-type-filter><floating-point-rounding>NONE</floating-point-rounding><fractional-exponentiation-type>DOUBLE</fractional-exponentiation-type><x-highway61-output-charset>ISO_8859_1</x-highway61-output-charset><includingDebug>false</includingDebug><all-files-optional>false</all-files-optional><x-allow-bound-indexes>false</x-allow-bound-indexes><x-dead-symbols-included>true</x-dead-symbols-included><x-copy-file-caching>true</x-copy-file-caching><x-zoned-decimal-value-checks>true</x-zoned-decimal-value-checks><debug-lines>false</debug-lines><x-enhanced-compiler-diagnostics>true</x-enhanced-compiler-diagnostics><display-numeric-conversion>false</display-numeric-conversion><x-cross-reference>false</x-cross-reference><sign-default-leading>false</sign-default-leading><sign-default-separate>false</sign-default-separate><fast-initialize>false</fast-initialize><x-fast-initialize-external>true</x-fast-initialize-external><force-default-charset>false</force-default-charset><generate-entry-classes>true</generate-entry-classes><generate-filler-annotations>false</generate-filler-annotations><x-group-accessors>false</x-group-accessors><histogram>false</histogram><generate-java-beans>false</generate-java-beans><generate-class-files>true</generate-class-files><generate-javadocs>true</generate-javadocs><generate-program-classes>true</generate-program-classes><generate-synchronized-accessors>false</generate-synchronized-accessors><x-database-creation>true</x-database-creation><ignore-uncaught-arithmetic-overflow>true</ignore-uncaught-arithmetic-overflow><implicit-recursion>false</implicit-recursion><debug>false</debug><x-compatible-initialize>false</x-compatible-initialize><x-interned-literals>true</x-interned-literals><x-intermediate-source>false</x-intermediate-source><list-output>false</list-output><storage-map>false</storage-map><x-data-migration>false</x-data-migration><x-highway61>false</x-highway61><x-syntax-check-only>false</x-syntax-check-only><congruent-assignment-optimization>true</congruent-assignment-optimization><literal-compaction-optimization>true</literal-compaction-optimization><x-class-file-list>false</x-class-file-list><overwrite>true</overwrite><x-highway61-pass-length>true</x-highway61-pass-length><x-highway61-pass-return-code>false</x-highway61-pass-return-code><pointer-math>false</pointer-math><embedded-sql>true</embedded-sql><x-generate-relaxed-refmod>false</x-generate-relaxed-refmod><commented-cobol-comments>false</commented-cobol-comments><commented-cobol-statements>false</commented-cobol-statements><terminal-accept-display-mode>false</terminal-accept-display-mode><x-highway61-use-length-special-register>false</x-highway61-use-length-special-register><direct-storage-access-optimization>true</direct-storage-access-optimization><x-compiler-trace>false</x-compiler-trace><x-track-data-flow>false</x-track-data-flow><truncate-binary>true</truncate-binary><x-based-linkage>true</x-based-linkage><x-based-local-storage>true</x-based-local-storage><replacement-word-wrapping>false</replacement-word-wrapping><java-arguments></java-arguments><java-properties></java-properties><sticky-linkage>DIALECT_DEFAULT</sticky-linkage><listing-output-file>*</listing-output-file><locking-behavior>DIALECT_DEFAULT</locking-behavior><long-arithmetic-safety>CHECKED</long-arithmetic-safety><histogram-smallest-bucket>STATEMENT</histogram-smallest-bucket><max-init-count>1000</max-init-count><maximum-decimal-digits>32</maximum-decimal-digits><native-charset>NATIVE</native-charset><optionFileApplied>false</optionFileApplied><perform-adhesion>DIALECT_DEFAULT</perform-adhesion><perform-type>DIALECT_DEFAULT</perform-type><pointer-size>0</pointer-size><program-package>programs</program-package><debug-source-base-directory>.</debug-source-base-directory><source-directory>./workspace/QwicsJNIWebApp/src/main/java</source-directory><source-format>FIXED72</source-format><x-database-type>1</x-database-type><synchronize-size>0</synchronize-size><tab-size>4</tab-size><x-trace-level>0</x-trace-level><when-compiled-date-format>hh.mm.ssMMM dd, yyyy</when-compiled-date-format><wrap-control-threshold>500</wrap-control-threshold><wrapping-threshold>500</wrapping-threshold></p3-compiler-options>
 * </p>
 */
@GroupAttributes
@Generated(
    value = "com.turrettech.p3cobol.P3Compiler",
    date = "2023-11-17T16:46:19.186252"
)
public class Ctpty extends ByteStoreImpl {
  private static final byte[] LITERALS = Testbr.LITERALS;

  public int[] _tageslimit;

  public boolean _tageslimit__isValid;

  public boolean _tageslimit__isCoherent;

  /**
   * "ctpty" - no argument constructor.
   */
  public Ctpty() {
    super(49, DataConstants.CobolType.GRP);
  }

  /**
   * "ctpty" - one argument (RunUnit) constructor (no longer relied upon by generated code).
   */
  @Deprecated
  public Ctpty(final RunUnit runUnit) {
    super(49, DataConstants.CobolType.GRP);
  }

  /**
   * "ctpty" - constructor from ByteStore (used for most REDEFINES).
   */
  public Ctpty(ByteStore buffer) {
    super(buffer);
  }

  /**
   * "ctpty" - constructor from ByteStore (used for some REDEFINES).
   */
  public Ctpty(ByteStore buffer, int offset, int length) {
    super(buffer, offset, length);
  }

  /**
   * "ctpty" - constructor from CobolPointer (used for based groups).
   */
  public Ctpty(CobolPointer p) {
    super(p);
  }

  /**
   * "ctpty" - constructor from P3RuntimeOptions (used for POJO convenience).
   */
  public Ctpty(P3RuntimeOptions options) {
    super(options, 49);
  }

  public CobolComparator getComparator() {
    return super.getComparator(LITERALS);
  }

  /**
   * Initialize items beginning with the first one.
   */
  public void initialize() {
    synchronize_();
  }

  public void set_Matchcode(ByteBuffer val) {
    super.setBytes(0, 8, val, 0);
  }

  public ByteBuffer get_Matchcode() {
    return super.toBuffer(0,8);
  }

  public void set_Bezeichnung(ByteBuffer val) {
    super.setBytes(8, 30, val, 0);
  }

  public ByteBuffer get_Bezeichnung() {
    return super.toBuffer(8,30);
  }

  public void set_Tageslimit(final Object o) {
    if (o instanceof ByteBuffer) {
      ByteBuffer val = (ByteBuffer)o;
      super.setBytes(38, 11, val, 0);
      _tageslimit__isValid = false;
    } else {
      set_Tageslimit((int[])o);
    }
  }

  public int[] get_Tageslimit() {
    if (!_tageslimit__isValid) { _tageslimit = super.getDisplayDecimal(38,11,2,DataConstants.CobolType.NSU); _tageslimit__isValid = true; _tageslimit__isCoherent = true;  } return _tageslimit;
  }

  public int[] set_Tageslimit(int[] val) {
    val = super.truncate(11,2, val,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NSU); this._tageslimit = val; _tageslimit__isValid = true; _tageslimit__isCoherent = false; return val; 
  }

  public void synchronize_Tageslimit() {
    if (_tageslimit__isValid && !_tageslimit__isCoherent) {
      _tageslimit__isCoherent = true;
      super.setDisplayNormalized(38,11,2, _tageslimit,com.turrettech.p3cobol.lib.common.DataConstants.CobolType.NSU);
    }
  }

  public String toString() {
    synchronize_();
    return getComparator().getCharset().decode(getBuffer()).toString();
  }

  public void set(String val) {
    synchronize_();
    setBytes(getComparator().getCharset().encode(val));
    void_();
  }

  /**
   * generateGroupGetBody("ctpty") - group get logic
   */
  public ByteBuffer getBuffer() {
    return super.getBuffer(0,49);
  }

  public void setBytes(ByteBuffer val) {
    super.setBytes(0, 49, val, 0);
    _tageslimit__isValid = false;
  }

  /**
   * generateGroupAccessors("ctpty") - group reference modified setter method
   * generateGroupSetModifiedBody("ctpty") - reference modified group set logic
   */
  @Override
  public void setBytes(final int offset, final int length, ByteBuffer val) {
    _tageslimit__isValid = false;
    super.setBytesConstrained(0 + offset, Math.min(49 - offset, length), val);
  }

  /**
   * generateGroupAccessors("ctpty") - group synchronizer
   */
  public void synchronize_() {
  }

  /**
   * generateGroupAccessors("ctpty") - group voider
   */
  public void void_() {
    _tageslimit__isValid = false;
  }

  /**
   * generateGroupAccessors("ctpty") - group pointer getter (for non-based groups only)
   * generateGroupGetPointerBody("ctpty") - group get pointer logic (non-based only)
   */
  public CobolPointer get_Ctpty__Pointer() {
    return super.pointerTo(0,49, DataConstants.CobolType.GRP);
  }

  static final ByteBuffer getLiteral(final int offset, final int length) {
    return ByteBuffer.wrap(LITERALS, offset, length);
  }

  static final String getNationalLiteral(final int offset, final int length) {
    return DataUtil.utf8Charset.decode(getLiteral(offset, length)).toString();
  }
}
